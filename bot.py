
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext

BUSINESS_NAME, BUSINESS_TYPE, AUTOMATION_GOAL, CONTACT_INFO = range(4)
ADMIN_ID = 731452613  # –¢–≤–æ–π ID

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –±–∏–∑–Ω–µ—Å?")
    return BUSINESS_NAME

def get_business_name(update: Update, context: CallbackContext):
    context.user_data['business_name'] = update.message.text
    update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–∞—à –±–∏–∑–Ω–µ—Å?")
    return BUSINESS_TYPE

def get_business_type(update: Update, context: CallbackContext):
    context.user_data['business_type'] = update.message.text
    update.message.reply_text("–ö–∞–∫–∞—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏?")
    return AUTOMATION_GOAL

def get_automation_goal(update: Update, context: CallbackContext):
    context.user_data['automation_goal'] = update.message.text
    update.message.reply_text("–ò –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, email)?")
    return CONTACT_INFO

def get_contact_info(update: Update, context: CallbackContext):
    context.user_data['contact_info'] = update.message.text
    user_data = context.user_data
    admin_message = (
        "üöÄ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n"
        "====================\n"
        f"üè¢ –ë–∏–∑–Ω–µ—Å: {user_data.get('business_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìä –°—Ñ–µ—Ä–∞: {user_data.get('business_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéØ –ó–∞–¥–∞—á–∞: {user_data.get('automation_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {user_data.get('contact_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        "===================="
    )
    try:
        context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
    with open("–∑–∞—è–≤–∫–∏.txt", "a", encoding="utf-8") as f:
        f.write("="*50 + "\n")
        f.write(f"–ë–∏–∑–Ω–µ—Å: {user_data.get('business_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
        f.write(f"–°—Ñ–µ—Ä–∞: {user_data.get('business_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
        f.write(f"–ó–∞–¥–∞—á–∞: {user_data.get('automation_goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
        f.write(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user_data.get('contact_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
        f.write("="*50 + "\n\n")
    update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ü§ñ –î–µ–º–æ-–±–æ—Ç—ã", callback_data='demo_bots')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data='contacts')],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )
    context.user_data.clear()
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

def main():
    updater = Updater("8318293519:AAEAgBxKW9-GvajUK586MryxOcbZ6gsIcdI", use_context=True)
    dp = updater.dispatcher
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            BUSINESS_NAME: [MessageHandler(Filters.text & ~Filters.command, get_business_name)],
            BUSINESS_TYPE: [MessageHandler(Filters.text & ~Filters.command, get_business_type)],
            AUTOMATION_GOAL: [MessageHandler(Filters.text & ~Filters.command, get_automation_goal)],
            CONTACT_INFO: [MessageHandler(Filters.text & ~Filters.command, get_contact_info)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
