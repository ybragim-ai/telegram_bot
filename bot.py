import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –¢–≤–æ–π ID –≤ Telegram (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ —Ü–∏—Ñ—Ä—ã –∏–∑ @userinfobot!)
ADMIN_ID = 731452613

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
BUSINESS_NAME, BUSINESS_TYPE, AUTOMATION_GOAL, CONTACT_INFO = range(4)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä–∑–∏–Ω
user_carts = {}

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§ñ –î–µ–º–æ-–±–æ—Ç—ã", callback_data='demo_bots')],
        [InlineKeyboardButton("üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='services')],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='leave_request')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')]
    ])

def get_demo_bots_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üçï –ü–∏—Ü—Ü–µ—Ä–∏—è", callback_data='demo_pizza')],
        [InlineKeyboardButton("‚òï –ö–æ—Ñ–µ–π–Ω—è", callback_data='demo_coffee')],
        [InlineKeyboardButton("üíá –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", callback_data='demo_salon')],
        [InlineKeyboardButton("üöö –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data='demo_delivery')],
        [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data='demo_store')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])

def get_cancel_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='cancel')]
    ])

# ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
async def start(update: Update, context):
    if update.message:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –¥–µ–º–æ-–±–æ—Ç NeiraLab Digital Tehnology:\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã 24/7\n"  
            "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 15-30%\n"
            "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ staff\n"
            "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—ã –æ–Ω–ª–∞–π–Ω\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=get_main_menu_keyboard()
        )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ==========
async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == 'demo_bots':
        await show_demo_bots(query)
    elif query.data == 'services':
        await show_services(query)
    elif query.data == 'leave_request':
        await start_leave_request(update, context)
    elif query.data == 'contacts':
        await show_contacts(query)
    elif query.data == 'back_to_main':
        await back_to_main(query)
    elif query.data == 'back_to_demos':
        await show_demo_bots(query)
    
    # –î–µ–º–æ-–±–æ—Ç—ã
    elif query.data == 'demo_pizza':
        await demo_pizza_bot(query)
    elif query.data == 'demo_coffee':
        await demo_coffee_bot(query)
    elif query.data == 'demo_salon':
        await demo_salon_bot(query)
    elif query.data == 'demo_delivery':
        await demo_delivery_bot(query)
    elif query.data == 'demo_store':
        await demo_store_bot(query)
    
    # –ü–∏—Ü—Ü–µ—Ä–∏—è
    elif query.data == 'pizza_menu':
        await show_pizza_menu(query)
    elif query.data == 'pizza_cart':
        await show_pizza_cart(query)
    elif query.data == 'pizza_clear':
        await clear_pizza_cart(query)
    elif query.data == 'pizza_order':
        await process_pizza_order(query)
    elif query.data.startswith('add_pizza_'):
        pizza_type = query.data.replace('add_pizza_', '')
        await add_pizza_to_cart(query, pizza_type)
    elif query.data == 'pizza_promo':
        await show_pizza_promo(query)
    
    # –ö–æ—Ñ–µ–π–Ω—è
    elif query.data == 'coffee_menu':
        await show_coffee_menu(query)
    elif query.data == 'coffee_cart':
        await show_coffee_cart(query)
    elif query.data == 'coffee_clear':
        await clear_coffee_cart(query)
    elif query.data == 'coffee_order':
        await process_coffee_order(query)
    elif query.data.startswith('add_coffee_'):
        coffee_type = query.data.replace('add_coffee_', '')
        await add_coffee_to_cart(query, coffee_type)
    elif query.data == 'coffee_loyalty':
        await show_coffee_loyalty(query)
    
    # –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã
    elif query.data == 'salon_services':
        await show_salon_services(query)
    elif query.data == 'salon_booking':
        await start_salon_booking(query)
    elif query.data == 'salon_masters':
        await show_salon_masters(query)
    
    # –î–æ—Å—Ç–∞–≤–∫–∞
    elif query.data == 'delivery_order':
        await start_delivery_order(query)
    elif query.data == 'delivery_tracking':
        await show_delivery_tracking(query)
    
    # –ú–∞–≥–∞–∑–∏–Ω
    elif query.data == 'store_catalog':
        await show_store_catalog(query)
    elif query.data == 'store_cart':
        await show_store_cart(query)
    elif query.data.startswith('add_store_'):
        item = query.data.replace('add_store_', '')
        await add_store_to_cart(query, item)
    
    elif query.data == 'cancel':
        await cancel_conversation(update, context)

# ========== –í–´–ë–û–† –î–ï–ú–û-–ë–û–¢–û–í ==========
async def show_demo_bots(query):
    await query.edit_message_text(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ-–±–æ—Ç –¥–ª—è –≤–∞—à–µ–π —Å—Ñ–µ—Ä—ã:\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —á–∞—Ç-–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–∞—Ö:",
        reply_markup=get_demo_bots_keyboard()
    )

# ========== –î–ï–ú–û –ü–ò–¶–¶–ï–†–ò–Ø ==========
async def demo_pizza_bot(query):
    user_id = query.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {'pizza': {}}
    elif 'pizza' not in user_carts[user_id]:
        user_carts[user_id]['pizza'] = {}
    
    keyboard = [
        [InlineKeyboardButton("üçï –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data='pizza_menu')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='pizza_cart')],
        [InlineKeyboardButton("üéÅ –ê–∫—Ü–∏–∏", callback_data='pizza_promo')],
        [InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='pizza_order')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –±–æ—Ç–æ–≤", callback_data='back_to_demos')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø–∏—Ü—Ü–µ—Ä–∏—é!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø–∏—Ü—Ü—É –∏–∑ –º–µ–Ω—é\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_pizza_menu(query):
    keyboard = [
        [InlineKeyboardButton("üçï –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 450 —Ä—É–±.", callback_data='add_pizza_margarita')],
        [InlineKeyboardButton("üçï –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ - 500 —Ä—É–±.", callback_data='add_pizza_pepperoni')],
        [InlineKeyboardButton("üçï –ì–∞–≤–∞–π—Å–∫–∞—è - 550 —Ä—É–±.", callback_data='add_pizza_hawaiian')],
        [InlineKeyboardButton("üçï –ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞ - 600 —Ä—É–±.", callback_data='add_pizza_cheese')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='pizza_cart')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_pizza')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "üçï –ú–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def add_pizza_to_cart(query, pizza_type):
    user_id = query.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_carts:
        user_carts[user_id] = {'pizza': {}}
    elif 'pizza' not in user_carts[user_id]:
        user_carts[user_id]['pizza'] = {}
    
    pizza_names = {
        'margarita': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
        'pepperoni': '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏',
        'hawaiian': '–ì–∞–≤–∞–π—Å–∫–∞—è',
        'cheese': '–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞'
    }
    
    if pizza_type in user_carts[user_id]['pizza']:
        user_carts[user_id]['pizza'][pizza_type] += 1
    else:
        user_carts[user_id]['pizza'][pizza_type] = 1
    
    await query.answer(f"‚úÖ {pizza_names[pizza_type]} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await show_pizza_menu(query)

async def show_pizza_cart(query):
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {}).get('pizza', {})
    
    if not cart:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    else:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        pizza_names = {
            'margarita': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
            'pepperoni': '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏',
            'hawaiian': '–ì–∞–≤–∞–π—Å–∫–∞—è',
            'cheese': '–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞'
        }
        pizza_prices = {
            'margarita': 450,
            'pepperoni': 500,
            'hawaiian': 550,
            'cheese': 600
        }
        
        for pizza_type, quantity in cart.items():
            price = pizza_prices[pizza_type] * quantity
            total += price
            text += f"‚Ä¢ {pizza_names[pizza_type]} - {quantity} —à—Ç. = {price} —Ä—É–±.\n"
        
        text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."
    
    keyboard = [
        [InlineKeyboardButton("üçï –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='pizza_menu')],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='pizza_clear')],
        [InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='pizza_order')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_pizza')]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def clear_pizza_cart(query):
    user_id = query.from_user.id
    if user_id in user_carts and 'pizza' in user_carts[user_id]:
        user_carts[user_id]['pizza'] = {}
    await query.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_pizza_cart(query)

async def process_pizza_order(query):
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {}).get('pizza', {})
    
    if not cart:
        await query.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    await query.edit_message_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏!\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ:\n"
        "‚Ä¢ –ó–∞–∫–∞–∑ –±—ã–ª –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫—É—Ö–Ω—é\n"
        "‚Ä¢ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—ã –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –±—ã –æ–Ω–ª–∞–π–Ω\n\n"
        "–•–æ—Ç–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='leave_request')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data='contacts')],
            [InlineKeyboardButton("üçï –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∏—Ü—Ü–µ—Ä–∏—é", callback_data='demo_pizza')],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )

async def show_pizza_promo(query):
    await query.edit_message_text(
        "üéÅ –ê–∫—Ü–∏–∏ –≤ –ø–∏—Ü—Ü–µ—Ä–∏–∏:\n\n"
        "üî• 2 –ø–∏—Ü—Ü—ã –ø–æ —Ü–µ–Ω–µ 1\n"
        "–ü—Ä–æ–º–æ–∫–æ–¥: PIZZA2\n\n"
        "üéâ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n"
        "–ü—Ä–æ–º–æ–∫–æ–¥: WELCOME20\n\n"
        "üëë –ö–∞–∂–¥—ã–π 5-–π –∑–∞–∫–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üçï –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é", callback_data='pizza_menu')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_pizza')]
        ])
    )

# ========== –î–ï–ú–û –ö–û–§–ï–ô–ù–Ø ==========
async def demo_coffee_bot(query):
    user_id = query.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {'coffee': {}}
    elif 'coffee' not in user_carts[user_id]:
        user_carts[user_id]['coffee'] = {}
    
    keyboard = [
        [InlineKeyboardButton("‚òï –ú–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤", callback_data='coffee_menu')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='coffee_cart')],
        [InlineKeyboardButton("üëë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data='coffee_loyalty')],
        [InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='coffee_order')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –±–æ—Ç–æ–≤", callback_data='back_to_demos')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ñ–µ–π–Ω—é!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∫–æ—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_coffee_menu(query):
    keyboard = [
        [InlineKeyboardButton("‚òï –≠—Å–ø—Ä–µ—Å—Å–æ - 150 —Ä—É–±.", callback_data='add_coffee_espresso')],
        [InlineKeyboardButton("‚òï –ê–º–µ—Ä–∏–∫–∞–Ω–æ - 180 —Ä—É–±.", callback_data='add_coffee_americano')],
        [InlineKeyboardButton("‚òï –ö–∞–ø—É—á–∏–Ω–æ - 220 —Ä—É–±.", callback_data='add_coffee_cappuccino')],
        [InlineKeyboardButton("‚òï –õ–∞—Ç—Ç–µ - 240 —Ä—É–±.", callback_data='add_coffee_latte')],
        [InlineKeyboardButton("üçµ –ß–∞–π - 120 —Ä—É–±.", callback_data='add_coffee_tea')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='coffee_cart')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_coffee')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "‚òï –ú–µ–Ω—é –∫–æ—Ñ–µ–π–Ω–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def add_coffee_to_cart(query, coffee_type):
    user_id = query.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_carts:
        user_carts[user_id] = {'coffee': {}}
    elif 'coffee' not in user_carts[user_id]:
        user_carts[user_id]['coffee'] = {}
    
    coffee_names = {
        'espresso': '–≠—Å–ø—Ä–µ—Å—Å–æ',
        'americano': '–ê–º–µ—Ä–∏–∫–∞–Ω–æ',
        'cappuccino': '–ö–∞–ø—É—á–∏–Ω–æ',
        'latte': '–õ–∞—Ç—Ç–µ',
        'tea': '–ß–∞–π'
    }
    
    if coffee_type in user_carts[user_id]['coffee']:
        user_carts[user_id]['coffee'][coffee_type] += 1
    else:
        user_carts[user_id]['coffee'][coffee_type] = 1
    
    await query.answer(f"‚úÖ {coffee_names[coffee_type]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await show_coffee_menu(query)

async def show_coffee_cart(query):
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {}).get('coffee', {})
    
    if not cart:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    else:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        coffee_names = {
            'espresso': '–≠—Å–ø—Ä–µ—Å—Å–æ',
            'americano': '–ê–º–µ—Ä–∏–∫–∞–Ω–æ',
            'cappuccino': '–ö–∞–ø—É—á–∏–Ω–æ',
            'latte': '–õ–∞—Ç—Ç–µ',
            'tea': '–ß–∞–π'
        }
        coffee_prices = {
            'espresso': 150,
            'americano': 180,
            'cappuccino': 220,
            'latte': 240,
            'tea': 120
        }
        
        for coffee_type, quantity in cart.items():
            price = coffee_prices[coffee_type] * quantity
            total += price
            text += f"‚Ä¢ {coffee_names[coffee_type]} - {quantity} —à—Ç. = {price} —Ä—É–±.\n"
        
        text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."
    
    keyboard = [
        [InlineKeyboardButton("‚òï –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='coffee_menu')],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='coffee_clear')],
        [InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='coffee_order')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_coffee')]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def clear_coffee_cart(query):
    user_id = query.from_user.id
    if user_id in user_carts and 'coffee' in user_carts[user_id]:
        user_carts[user_id]['coffee'] = {}
    await query.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_coffee_cart(query)

async def process_coffee_order(query):
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {}).get('coffee', {})
    
    if not cart:
        await query.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    await query.edit_message_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏!\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ:\n"
        "‚Ä¢ –ó–∞–∫–∞–∑ –±—ã–ª –±—ã –ø–µ—Ä–µ–¥–∞–Ω –±–∞—Ä–∏—Å—Ç–∞\n"
        "‚Ä¢ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—ã –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã\n\n"
        "–•–æ—Ç–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='leave_request')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data='contacts')],
            [InlineKeyboardButton("‚òï –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ñ–µ–π–Ω—é", callback_data='demo_coffee')],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )

async def show_coffee_loyalty(query):
    await query.edit_message_text(
        "üëë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        "‚≠ê –í–∞—à —Å—Ç–∞—Ç—É—Å: –ó–æ–ª–æ—Ç–æ–π –∫–ª–∏–µ–Ω—Ç\n"
        "üéØ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: 8 –∏–∑ 10 –∑–≤–µ–∑–¥\n\n"
        "üéÅ –í–∞—à–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Å–µ –∑–∞–∫–∞–∑—ã\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ–±–∞–≤–∫–∞ —Å–∏—Ä–æ–ø–∞\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ\n\n"
        "üî• –ë–ª–∏–∂–∞–π—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞:\n"
        "–ï—â—ë 2 –∑–≤–µ–∑–¥—ã –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ!\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚òï –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é", callback_data='coffee_menu')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_coffee')]
        ])
    )

# ========== –î–ï–ú–û –ú–ê–ì–ê–ó–ò–ù–ê –ü–†–û–î–£–ö–¢–û–í ==========
async def demo_store_bot(query):
    user_id = query.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {'store': {}}
    elif 'store' not in user_carts[user_id]:
        user_carts[user_id]['store'] = {}
    
    keyboard = [
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='store_catalog')],
        [InlineKeyboardButton("üì¶ –ö–æ—Ä–∑–∏–Ω–∞", callback_data='store_cart')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –±–æ—Ç–æ–≤", callback_data='back_to_demos')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_store_catalog(query):
    keyboard = [
        [InlineKeyboardButton("ü•õ –ú–æ–ª–æ–∫–æ - 80 —Ä—É–±.", callback_data='add_store_milk')],
        [InlineKeyboardButton("üçû –•–ª–µ–± - 45 —Ä—É–±.", callback_data='add_store_bread')],
        [InlineKeyboardButton("ü•ö –Ø–π—Ü–∞ - 120 —Ä—É–±.", callback_data='add_store_eggs')],
        [InlineKeyboardButton("üç¨ –°–∞—Ö–∞—Ä - 65 —Ä—É–±.", callback_data='add_store_sugar')],
        [InlineKeyboardButton("üì¶ –ö–æ—Ä–∑–∏–Ω–∞", callback_data='store_cart')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_store')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def add_store_to_cart(query, item):
    user_id = query.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_carts:
        user_carts[user_id] = {'store': {}}
    elif 'store' not in user_carts[user_id]:
        user_carts[user_id]['store'] = {}
    
    item_names = {
        'milk': '–ú–æ–ª–æ–∫–æ',
        'bread': '–•–ª–µ–±',
        'eggs': '–Ø–π—Ü–∞',
        'sugar': '–°–∞—Ö–∞—Ä'
    }
    
    if item in user_carts[user_id]['store']:
        user_carts[user_id]['store'][item] += 1
    else:
        user_carts[user_id]['store'][item] = 1
    
    await query.answer(f"‚úÖ {item_names[item]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await show_store_catalog(query)

async def show_store_cart(query):
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {}).get('store', {})
    
    if not cart:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    else:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        item_names = {
            'milk': '–ú–æ–ª–æ–∫–æ',
            'bread': '–•–ª–µ–±',
            'eggs': '–Ø–π—Ü–∞',
            'sugar': '–°–∞—Ö–∞—Ä'
        }
        item_prices = {
            'milk': 80,
            'bread': 45,
            'eggs': 120,
            'sugar': 65
        }
        
        for item, quantity in cart.items():
            price = item_prices[item] * quantity
            total += price
            text += f"‚Ä¢ {item_names[item]} - {quantity} —à—Ç. = {price} —Ä—É–±.\n"
        
        delivery = 150 if total < 1500 else 0
        final_total = total + delivery
        
        text += f"\nüí∞ –¢–æ–≤–∞—Ä—ã: {total} —Ä—É–±."
        text += f"\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery} —Ä—É–±."
        text += f"\nüíé –ò—Ç–æ–≥–æ: {final_total} —Ä—É–±."
        
        if total < 1500:
            text += f"\n\nüéÅ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ {1500 - total} —Ä—É–±. –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏!"
    
    keyboard = [
        [InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='store_catalog')],
        [InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='delivery_order')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_store')]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# ========== –û–°–¢–ê–õ–¨–ù–´–ï –î–ï–ú–û-–ë–û–¢–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ==========
async def demo_salon_bot(query):
    keyboard = [
        [InlineKeyboardButton("üíá –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='salon_services')],
        [InlineKeyboardButton("üë©‚Äçüíº –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data='salon_masters')],
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω", callback_data='salon_booking')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –±–æ—Ç–æ–≤", callback_data='back_to_demos')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "üíá –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_salon_services(query):
    services_text = (
        "üíá –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n"
        "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏:\n"
        "‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è - 1200 —Ä—É–±.\n"
        "‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è - 800 —Ä—É–±.\n" 
        "‚Ä¢ –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - –æ—Ç 2500 —Ä—É–±.\n"
        "‚Ä¢ –£–∫–ª–∞–¥–∫–∞ - 600 —Ä—É–±.\n\n"
        "–ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å:\n"
        "‚Ä¢ –ú–∞–Ω–∏–∫—é—Ä - 900 —Ä—É–±.\n"
        "‚Ä¢ –ü–µ–¥–∏–∫—é—Ä - 1200 —Ä—É–±.\n"
        "‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫ - 600 —Ä—É–±.\n\n"
        "üéÅ –ê–∫—Ü–∏—è: –ü—Ä–∏–≤–µ–¥–∏ –ø–æ–¥—Ä—É–≥—É - –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É 20%!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='salon_booking')],
        [InlineKeyboardButton("üë©‚Äçüíº –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data='salon_masters')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_salon')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(services_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_salon_masters(query):
    masters_text = (
        "üë©‚Äçüíº –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:\n\n"
        "üíé –ê–Ω–Ω–∞ - —Ç–æ–ø-—Å—Ç–∏–ª–∏—Å—Ç\n"
        "–°—Ç–∞–∂: 8 –ª–µ—Ç\n"
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —Å–ª–æ–∂–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏\n\n"
        "üíé –ú–∞—Ä–∏—è - –º–∞—Å—Ç–µ—Ä –Ω–æ–≥—Ç–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞\n"
        "–°—Ç–∞–∂: 5 –ª–µ—Ç\n"
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä\n\n"
        "üíé –ï–ª–µ–Ω–∞ - –≤–∏–∑–∞–∂–∏—Å—Ç\n"
        "–°—Ç–∞–∂: 6 –ª–µ—Ç\n"
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤–µ—á–µ—Ä–Ω–∏–π –º–∞–∫–∏—è–∂\n\n"
        "–ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='salon_booking')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_salon')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(masters_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def start_salon_booking(query):
    await query.edit_message_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã!\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ:\n"
        "‚Ä¢ –í—ã–±—Ä–∞–ª–∏ –±—ã –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥—É\n"
        "‚Ä¢ –í—ã–±—Ä–∞–ª–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å\n\n"
        "–•–æ—Ç–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='leave_request')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data='contacts')],
            [InlineKeyboardButton("üíá –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω", callback_data='demo_salon')],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )

async def demo_delivery_bot(query):
    keyboard = [
        [InlineKeyboardButton("üöö –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='delivery_order')],
        [InlineKeyboardButton("üìä –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='delivery_tracking')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –±–æ—Ç–æ–≤", callback_data='back_to_demos')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        "üöö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä—å–µ—Ä–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_delivery_tracking(query):
    tracking_text = (
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
        "üü¢ –ó–∞–∫–∞–∑ #12345\n"
        "–°—Ç–∞—Ç—É—Å: –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏\n"
        "–ö—É—Ä—å–µ—Ä: –î–º–∏—Ç—Ä–∏–π\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 XXX XXX-XX-XX\n"
        "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 15-20 –º–∏–Ω—É—Ç\n\n"
        "–ú–∞—Ä—à—Ä—É—Ç:\n"
        "—É–ª. –ü—É—à–∫–∏–Ω–∞, 10 ‚Üí —É–ª. –õ–µ–Ω–∏–Ω–∞, 25\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    )
    
    keyboard = [
        [InlineKeyboardButton("üöö –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='delivery_order')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_delivery')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(tracking_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def start_delivery_order(query):
    await query.edit_message_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–ª—è —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ:\n"
        "‚Ä¢ –£–∫–∞–∑–∞–ª–∏ –±—ã –∞–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –í—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ (—ç–∫–æ–Ω–æ–º/—ç–∫—Å–ø—Ä–µ—Å—Å)\n"
        "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–µ\n\n"
        "–•–æ—Ç–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='leave_request')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data='contacts')],
            [InlineKeyboardButton("üöö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data='demo_delivery')],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )

# ========== –£–°–õ–£–ì–ò –ò –¶–ï–ù–´ ==========
async def show_services(query):
    services_text = (
        "üíº –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n"
        "–ß–∞—Ç-–±–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞\n"
        "‚Ä¢ –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM\n"
        "‚Ä¢ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–π –±–æ—Ç - –æ—Ç 15 000 —Ä—É–±.\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç - –æ—Ç 25 000 —Ä—É–±.\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –æ—Ç 10 000 —Ä—É–±.\n"
        "‚Ä¢ –°—Ä–æ–∫: 8-14 –¥–Ω–µ–π\n\n"
        "–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫\n"
        "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n" 
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1 –º–µ—Å—è—Ü\n"
        "‚Ä¢ –î–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –Ω–µ–¥–µ–ª–∏\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –¥–µ–º–æ!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='leave_request')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("ü§ñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ-–±–æ—Ç—ã", callback_data='demo_bots')],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(services_text, reply_markup=InlineKeyboardMarkup(keyboard))

# ========== –ö–û–ù–¢–ê–ö–¢–´ ==========
async def show_contacts(query):
    await query.edit_message_text(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
        "Telegram: @your_username\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "Email: your@email.com\n"
        "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-21:00\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!\n"
        "–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: 8-14 –¥–Ω–µ–π\n"
        "–ì–∞—Ä–∞–Ω—Ç–∏—è: 1 –º–µ—Å—è—Ü\n\n"
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='leave_request')],
            [InlineKeyboardButton("ü§ñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ-–±–æ—Ç—ã", callback_data='demo_bots')],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )

# ========== –°–ë–û–† –ó–ê–Ø–í–û–ö (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ==========
async def start_leave_request(update: Update, context):
    query = update.callback_query
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    await query.edit_message_text(
        "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n"
        "–í–æ–ø—Ä–æ—Å 1/4:\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –±–∏–∑–Ω–µ—Å?",
        reply_markup=get_cancel_keyboard()
    )
    
    return BUSINESS_NAME

async def get_business_name(update: Update, context):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ user_data
    context.user_data['business_name'] = update.message.text
    
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {update.message.text}\n\n"
        "–í–æ–ø—Ä–æ—Å 2/4:\n–ö–∞–∫–∞—è —É –≤–∞—Å —Å—Ñ–µ—Ä–∞? (—Ä–µ—Å—Ç–æ—Ä–∞–Ω, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –¥–æ—Å—Ç–∞–≤–∫–∞...)",
        reply_markup=get_cancel_keyboard()
    )
    return BUSINESS_TYPE

async def get_business_type(update: Update, context):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ user_data
    context.user_data['business_type'] = update.message.text
    
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {update.message.text}\n\n"
        "–í–æ–ø—Ä–æ—Å 3/4:\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å? (–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤, –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤...)",
        reply_markup=get_cancel_keyboard()
    )
    return AUTOMATION_GOAL

async def get_automation_goal(update: Update, context):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ user_data
    context.user_data['automation_goal'] = update.message.text
    
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {update.message.text}\n\n"
        "–í–æ–ø—Ä–æ—Å 4/4:\n–í–∞—à –Ω–æ–º–µ—Ä Telegram –¥–ª—è —Å–≤—è–∑–∏?",
        reply_markup=get_cancel_keyboard()
    )
    return CONTACT_INFO

async def get_contact_info(update: Update, context):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    context.user_data['contact_info'] = update.message.text
    user_data = context.user_data

    # üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                "üöÄ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n"
                f"–ë–∏–∑–Ω–µ—Å: {user_data.get('business_name')}\n"
                f"–°—Ñ–µ—Ä–∞: {user_data.get('business_type')}\n"
                f"–ó–∞–¥–∞—á–∞: {user_data.get('automation_goal')}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user_data.get('contact_info')}"
            )
        )
        print("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω.")

    context.user_data.clear()
    return ConversationHandler.END

# ========== –ù–ê–í–ò–ì–ê–¶–ò–Ø ==========
async def back_to_main(query):
    await query.edit_message_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_main_menu_keyboard()
    )

async def cancel_conversation(update: Update, context):
    query = update.callback_query
    
    await query.edit_message_text(
        '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=get_main_menu_keyboard()
    )
    
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_command(update: Update, context):
    await update.message.reply_text(
        '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=get_main_menu_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main():
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN!")
        return
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # ConversationHandler –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú!
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(start_leave_request, pattern='^leave_request$')],
            states={
                BUSINESS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_business_name)],
                BUSINESS_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_business_type)],
                AUTOMATION_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_automation_goal)],
                CONTACT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact_info)],
            },
            fallbacks=[
                CallbackQueryHandler(cancel_conversation, pattern='^cancel$'),
                CommandHandler('cancel', cancel_command)
            ],
            allow_reentry=True
        )
        
        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("‚èπ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()

